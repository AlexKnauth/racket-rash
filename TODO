Fully stable release blockers
-----------------------------

* how should shell aliases be done?  The current way I'm doing it is clearly wrong.  Is that something that should be at the rash level instead of the shell-pipeline layer?  Or maybe there should be some sort of middle layer that inspects things that is in this library but optional for use?

* process fd/temp-file redirects a la <() >() from bash

* shellify -- maybe replace with shellify/left and shellify/right, or have another argument that determines the position in the arg list to put the string -- maybe allow negative numbers to count from end.

* a custom exn type for pipeline failures?

Other todo, maybe for version 2
-------------------------------

* Pipeline suspend/resume -- Threads have pause/resume, Unix processes have sigstop/sigcont, but I'm not sure how to pause/suspend windows processes.  Maybe a Unix-only feature?  But this is a pretty standard shell feature for job control.

* bg pipeline disowning?
    Disowning will probably only work for pipelines
    without any racket functions or filters in them.  But perhaps you should
    be able to mark a pipeline as disownable, which would start a new racket
    process which would run the pipeline?  It would have to be very restricted,
    because a pipeline could be using closures, which could not really be copied.
    It looks like bash and zsh can disown a backgrounded shell
    function and have it survive the shell exiting if that function was started
    in the background, which tells me that backgrounded bash/zsh functions are
    run in a subshell.  Presumably this means the process is forked, so that
    the subshell can still access all previously defined functions.  I feel
    like this could have many cases of subtle weirdness, so I'm not sure I
    want to follow that direction without something more explicit marking a
    clear boundary.  Also, fork() only works on Unix, and it would be nice if
    the shell worked on Windows too, so if I can reasonably avoid relying on
    fork, I should.

