* how to specify 'append 'truncate 'error for output files?  Maybe #:out etc could take a list that includes a path and 'truncate or 'append?

* kw-args for functions in shell pipelines
* a custom exn type for pipeline failures
* Pipeline suspend/resume -- Threads have pause/resume, Unix processes have sigstop/sigcont, but I'm not sure how to pause/suspend windows processes.  Maybe a Unix-only feature?

* path expansion functions -- ~, globs, /paths/with/$VARS/in/middle
* easy port opening functions for redirection to files (>, >|, >>, <) and temp-file redirects ( <() >() )
* wrapper struct for functions to return non-zero but have it still count as success
* bg pipeline disowning?
    Disowning will probably only work for pipelines
    without any racket functions or filters in them.  But perhaps you should
    be able to mark a pipeline as disownable, which would start a new racket
    process which would run the pipeline?  It would have to be very restricted,
    because a pipeline could be using closures, which could not really be copied.
    It looks like bash and zsh can disown a backgrounded shell
    function and have it survive the shell exiting if that function was started
    in the background, which tells me that backgrounded bash/zsh functions are
    run in a subshell.  Presumably this means the process is forked, so that
    the subshell can still access all previously defined functions.  I feel
    like this could have many cases of subtle weirdness, so I'm not sure I
    want to follow that direction without something more explicit marking a
    clear boundary.  Also, fork() only works on Unix, and it would be nice if
    the shell worked on Windows too, so if I can reasonably avoid relying on
    fork, I should.

