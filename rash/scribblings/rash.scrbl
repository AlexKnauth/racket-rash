#lang scribble/manual

@title[#:tag "rash"]{RASH: RAcket SHell Library}
@author+email["William Hatch" "william@hatch.uno"]

@defmodule[rash]
@(require
(for-label
rash
(prefix-in shell/pipeline-macro/ shell/pipeline-macro)
))

@bold{Rash}, @italic{adj} 1.  Hurrying into action or assertion without due caution and regardless of prudence, hasty, reckless, precipitate.  “@italic{A rash programmer is likely to produce shell scripts.}”

@section{Stability}

Rash is not entirely stable.  It is not quite ready for a stable release.  But it is definitely ready to have fun with!

@section{RASH Guide}

TODO

@section{RASH Reference}

Also be sure to see
@secref["pipeline-macro"
        #:doc '(lib "shell/scribblings/shell-pipeline.scrbl")]
for documentation on running pipelines, defining and using pipeline operators, etc.

@defform[(rash options ... codestring)]{
Read @racket[codestring] as rash code.

Options:

@racket[#:out] sets the default output port or transformer for unix pipelines (as run by @racket[run-pipeline]).  The default runs @racket[port->string] on the output.

@racket[#:in] sets the default input port for unix pipelines (as run by @racket[run-pipeline]).  The default is an empty port.

@racket[#:err] sets the default error port for unix pipelines (as run by @racket[run-pipeline]).  The default is to turn the errors into a string that is put into the exception generated by an error in the pipeline.

@racket[#:default-starter] sets the default starting pipeline operator for @racket[run-pipeline] when one is not explicitly given in the pipeline.  The default is one of the simple unixy ones... TODO - this default will probably change.

@racket[#:default-line-macro] sets the default line-macro for lines that don't explicitly have one.  The default is the run-pipeline line-macro.

TODO - options for changing the reader, etc.

}

@defform[(make-rash-transformer options ...)]{
This takes all the same options as @racket[rash], but doesn't take a code string.  It produces a transformer like @racket[rash], but with different default values for the available options.

@(racketblock
(define-syntax my-rash (make-rash-transformer #:default-starter #'=basic-object-pipe=)))
}

@defform[(make-rash-module-begin-transformer options ...)]{
This takes all the same options as @racket[rash], but doesn't take a code string.  It produces a transformer like #%module-begin in #lang rash, but with different defaults and reader options.

Use it to make a #lang that is like #lang rash but customized to your liking.

@(racketblock
(define-syntax my-rash-module-begin
  (make-rash-module-begin-transformer #:default-starter #'=basic-object-pipe=)))
}


things to document:

rash/wired



from linea:

define-line-macro

do-line-macro

default-line-macro

docs about reader

how to change the inside/outside readtable

@defform[#:kind "line-macro" (cd directory)]{
Change directory to given directory.  The directory is quoted, so just put a literal path or a string.

If no argument is given, it changes to the user's home directory.

Eventually this will be replaced by a better version, but it should be backwards compatible.
}

@defform[#:kind "line-macro" (run-pipeline arg ...)]{
Same as @racket[shell/pipeline-macro/run-pipeline], except wrapped as a line-macro.
}

@section{Interactive Use}

TODO

how to refer to old repl results

how to change the default pipe in the repl

rashrc stuff



@section{Code and License}

The code is available
@hyperlink["https://github.com/willghatch/racket-rash"]{on github}.

This library is licensed under the terms of the LGPL version 3, or (at
your option) any later version published by the Free Software
Foundation (IE LGPL3+).
